// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: query.sql

package queries

import (
	"context"
	"database/sql"
)

const flagTransaction = `-- name: FlagTransaction :exec
UPDATE transactions
set flagged = true
WHERE id = ?
`

func (q *Queries) FlagTransaction(ctx context.Context, db DBTX, id int64) error {
	_, err := db.ExecContext(ctx, flagTransaction, id)
	return err
}

const getTransaction = `-- name: GetTransaction :one
SELECT id, from_account, to_account, amount, status, flagged, created_at, updated_at FROM transactions
WHERE id = ? LIMIT 1
`

func (q *Queries) GetTransaction(ctx context.Context, db DBTX, id int64) (Transaction, error) {
	row := db.QueryRowContext(ctx, getTransaction, id)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.FromAccount,
		&i.ToAccount,
		&i.Amount,
		&i.Status,
		&i.Flagged,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertTransaction = `-- name: InsertTransaction :exec
INSERT INTO transactions
(from_account, to_account, amount, status, flagged, created_at, updated_at)
VALUES
(?, ?, ?, ?, ?, ?, ?)
`

type InsertTransactionParams struct {
	FromAccount sql.NullInt64
	ToAccount   sql.NullInt64
	Amount      sql.NullInt64
	Status      sql.NullInt64
	Flagged     sql.NullBool
	CreatedAt   sql.NullTime
	UpdatedAt   sql.NullTime
}

func (q *Queries) InsertTransaction(ctx context.Context, db DBTX, arg InsertTransactionParams) error {
	_, err := db.ExecContext(ctx, insertTransaction,
		arg.FromAccount,
		arg.ToAccount,
		arg.Amount,
		arg.Status,
		arg.Flagged,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const listTransactions = `-- name: ListTransactions :many
SELECT id, from_account, to_account, amount, status, flagged, created_at, updated_at FROM transactions
`

func (q *Queries) ListTransactions(ctx context.Context, db DBTX) ([]Transaction, error) {
	rows, err := db.QueryContext(ctx, listTransactions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.FromAccount,
			&i.ToAccount,
			&i.Amount,
			&i.Status,
			&i.Flagged,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const unflagTransaction = `-- name: UnflagTransaction :exec
UPDATE transactions
set flagged = false
WHERE id = ?
`

func (q *Queries) UnflagTransaction(ctx context.Context, db DBTX, id int64) error {
	_, err := db.ExecContext(ctx, unflagTransaction, id)
	return err
}
